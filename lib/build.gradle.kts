/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.9/userguide/building_java_projects.html in the Gradle documentation.
 */
import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    // Built-in Gradle plugin aliases
    java
    application
    idea
    // Spring Boot and Dependency Management plugins
    id("org.springframework.boot") version "3.0.5"
    id("io.spring.dependency-management") version "1.1.0"
    // For gRPC code generation (if you use proto files)
    // id 'com.google.protobuf' version '0.9.4'
}
// Kotlin DSL requires double quotes, not single quotes.
group = "com.example"
version = "1.0.0"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    // CORRECT Kotlin DSL usage
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("io.grpc:grpc-netty-shaded:1.51.0")
    implementation("com.google.protobuf:protobuf-java:3.21.7")

    compileOnly("org.projectlombok:lombok:1.18.24")
    annotationProcessor("org.projectlombok:lombok:1.18.24")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")
}

// If you're using the application plugin
application {
    // The main class that contains your public static void main entry point
    mainClass = "java.com.example.microservices.orderms.OrderMicroserviceApplication"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


// If using Spring Boot's 'bootJar' task:
tasks.named<BootJar>("bootJar") {
    archiveFileName.set("my-mission-critical-app-${project.version}.jar")
}
